#we wil talk about the functions of [LIST] & (TUPLES) & {SETS} & {DICTIONRIES}
#الفروقات بين الاربع انواع 
#list  : يمكن التعديل عليها وتقبل تكرار العناصر
#tuple :لا يمكن التعديل فيها بعد انشائها 
#set   :لا تقبل التكرار ولكن يمكن التعديل عليها واهم ما يميزها انك اذا ادخلت بها عناصر مكرره تقوم بحذفها من تلقاء نفسها . 
#dictionary : اهم مميزاتها انها تحتوى على مفاتيح وقيم 

#========================
###CREATING###

#Create lists#
z=[1,2,3];print(z)# لاحظ استخدام الاقواس المربعه ثم تضع العناصر بداخلهم


#Create tuples#
c=1,2,3;print(c)#هكذا بدون اقواس 
cc=(1,2,3,4);print(cc)#او بإستخدام تلك القواس الدائريه 


#Create sets#
v={1,2,3};print(v)#يتم استخدام تلك الاقواس الكيرفى فى انشائه


#Create dictionary#
b={1:'a',2:'b',3:'c'};print(b)
#نفس اقواس ال set لكن يميزه انه يحوى مفاتيح وقيم .

#========================
###CONVERTING###

x=1,2,3,4,5,6,7,8,9,10

x_1=list(x);print(x_1)
#هنا انا ها احول العناصر ال ف x لقائمة list 

x_2=tuple(x);print(x_2)
#وهنا ها احول القيم ال ف x الى مصفوفه tuple 

x_3=set(x);print(x_3)
#هنا  ها احول للمجموعه set 

#لاحظ ان ال جاى ها استخد عناصر x واحطهم ف قاموس على انهم مفاتيح keys ولكن فى خانة القيم تجد none 
x_4=dict.fromkeys(x);print(x_4)
#+++++++++++++++++++++
xx={1:'a',2:'b',3:'c'}
print(list(xx.keys()))#هنا بأعمل قايمه بالمفاتيح 
print(list(xx.values()))#هنا ها اعمل قايمه بالقيم
print(list(xx.items()))#هنا ها يجيب قايمه بالقيم والمفاتيح 
#+++++++++++++++++++++
print(set(xx.keys()))#هنا بأعمل مجموه بالمفاتيح 
print(set(xx.values()))#هنا ها اعمل مجموعه بالقيم
print(set(xx.items()))#هنا ها يجيب مجموعه بالقيم والمفاتيح 
#+++++++++++++++++++++
print(tuple(xx.keys()))#هنا بأعمل مصفوفه بالمفاتيح 
print(tuple(xx.values()))#هنا ها اعمل مصفوفه بالقيم
print(tuple(xx.items()))#هنا ها يجيب مصفوفه بالقيم والمفاتيح 




#=========================
###الداله del ###
 
# تستخدم لحذف العناصر من القوائم او حذف قاموس كامل 
q=[1,2,3,4,5];del q[0];print(q)
#هنا قمنا بحذف العنصر صاحب المكان رقم 0 وهو الرقم 1 

#كما نعلم لايمكن التعديل على ال tuples 

#w={1,2,3,4,5};del w ;print(w)‎‎
#هنا قمنا بحذف الset بعد انشائها 

#  e={'e':1,'g':2,'y':3};del e ;print(e)
#هنا ايضا تم مسح القاموس بالكامل بعد انشائه 

#===========================
###الداله ()remove ###

#تستخدم لحذف عنصر من القائمه بمجرد وضع العنصر نفسه وان لم يجد العنصر يرجعلك error بان العنصر غير موجود فى القائمه 
#لا يمكن استخدام الداله هذه فى ال tuple ' set or dictionary 

# r=[1,2,3,4,5];r.remove(7);print(r)

#.......................................
###الداله ()pop ###

#تقوم بحذف عنصر ما من القائمه بمجرد وضع رقم الاندكس الخاص به داخل اقواس الداله وان تركت الاقواس فارغه يقوم بحذف اخر عنصر .
a=[1,2,3,4,5,6];print(a.pop(2))#بوضعى للرقم 2 معناها حذف العنصر صاحب المكان 2 الا وهو العنصر الثالث رقم "3" تمم 
print(a.pop())#لكن لو عاوز تحذف اخر عنصر بتسيب الاقواس فارغه 
aa={1,2,3,4,5,6};print(aa.pop())#هنا وعلى عكس الليست تقوم تلك الداله بحذف اول عنصر ولا تاخذ اى انديكس 
aaa={1:'a',2:'b',3:'c'};print(aaa.pop(1))#هنا بقا الداله بتاخد ف اقواسها اسم المفتاح وهنا على سبيل المثال حطيت المفتاح 1 ف حذف القيمه بتاعتهوهى حرف 'ايه' بالمفتاح بتاعه كمان . تمم

#===========================
###الدالتين ()extend و ()append ###

t=[1,2,3]
t_1=[4,5,6]
#يمكن جمع عناصر اى قائمتين من نوع list على بعضهم بالعباره + او الداله ()extend 
t_2=t+t_1;print(t_2)
t.extend(t_1);print(t) #هنا نستخدم هذه الداله بتلك الطريقه ومعناها اضف عناصر القائمه التانيه الى القائمه الاول و عليه تتأثر اقائمه الاولى بالتغيير ولا تتأثر القائمه الثانيه بأى تغيير .

#اما الداله ()append تستخدم لاضافة عناصر بعينها فى القائمه 
t.append(4);print(t) #لاحظ ان القائمه t تحوى 7 عناصر 

#ولكن الداله ()insert تستخد لاضافه عنصر لكن فى مكان معين ويتم وضع الاندكس الخاص بالمكان المراد وضع العنصر به 
t.insert(1,"4");print(t)
#لاحظ تم وضع العنصر '4' فى الاندكس رقم 1 الا وهو العنصر الثانى فى القائمه 

#============================

#بعض الدوال الخاصه#
###الداله ()len ###

#لايجاد عدد عناصر القائمه 

y=[1,2,3,4,'a','b','c','d'];print(len(y))
y_1=(1,2,3,4,'a','b','c','d');print(len(y_1))
y_2={1,2,3,4,'a','b','c','d'};print(len(y_2))
y_3={1:'a',2:'b',3:'c',4:'d'};print(len(y_3))


###الدالتين   ()max و ()min ###

#لاحظ يتم استخدامهم اذا كان جميع عناصر القائمه من نوع واحد اما ارقام او حروف .

#ملاحظه  10>1.....z>a
u=[1,2,3,4,5];print(max(u),min(u))
uu=['a','b','c','d','e'];print(max(uu),min(uu))
u_1=(1,2,3,4,5);print(max(u_1),min(u_1))
uu_1=('a','b','c','d','e');print(max(uu_1),min(uu_1))
u_2={1,2,3,4,5};print(max(u_2),min(u_2))
uu_2={'a','b','c','d','e'};print(max(uu_2),min(uu_2))
#لاحظ ان البحث يتم ويطبق على المفاتيح فى القاموس 
u_3={1:'a',2:'b',3:'c',4:'d'};print(max(u_3),min(u_3))
uu_3={'a':1,'b':2,'c':3,'d':4};print(max(uu_3),min(uu_3))

#=======================
###الداله ()sort ###
###الداله ()sorted ###
 
#الدوال دول مش ها يشتغلوا على  ال tuple or set or dictionary
#بيفرق  بينهم ال ()sorted بتحتاج variable تخزن فيه ولكن ()sort بتعدل فى الحاجه نفسها بانها بترتبها 


i=[5,7,2,3,1,9,0,4]
ii=['a','q','t','u','z']
i.sort();print(i)
ii.sort();print(ii)
#ولو عاوز تعكس الترتيب 
i.sort(reverse=True);print(i)
ii.sort(reverse=True);print(ii)
print('------------------------')
i_1=sorted(i);print(i_1)
ii_1=sorted(ii);print(ii_1)
#نفس الموضوع لو عاوز تخلى الترتيب بالعكس
i_2=sorted(i,reverse=True);print(i_2)
ii_2=sorted(ii,reverse=True);print(ii_2)

#=======================
###الداله ()reverse ###

# تستخدم لعكس ترتيب عناصر قائمه ما 
o=[1,3,5,7,9,0,8,6,4,2]
o.reverse();print(o)#لاحظ جاب ال ف الاخر ف الاول وهكذا 

#=======================
###الداله   ()count ###

# تقوم بعد عدد مرات ظهور وورود عنصر معين فى اى قائمه 
p=[1,2,3,4,5,5,5,5,6,5,5];print(p.count(5))
pp=1,2,3,4,5,5,5,5,6,5,5 #هذا شكل من اشكال كتابة ال (tuple).
print(pp.count(5))
#لا يتم استخدام الداله ()count فى المجموعه set لانها تقوم بحذف العنصر المكرر وبالتالى يكون عدد التكرار مره واحده فقط.
#ايضا لا يتم استخدام الدال count فى القاموس dictionary لانه لا يجب ان يقون اكثر من مفتاح لهم نفس الاسم .

#========================
###الداله ()copy ###

#تستخدم لاخذ نسخه طبق الاصل من قائمة ما ولكن ان حدث اى تعديل فى القائمه الاصل لا يؤثر ذلك على النسخه 
s=[1,2,3,4,5];s_1=s.copy();s[0]=2;print("s   : ",s);print("s_1 : ",s_1)
#لاحظ انه تم التعديل على القائمه s بعد اخذ نسخه منها ولكن التعديل لم يحدث ف النسخه كما حدث ف الاصل 
ss={1,2,3,4,5};ss_1=ss.copy();ss.pop();print("ss  : ",ss);print("ss_1: ",ss_1)
#ايضا هنا تم التعديل على ال set ولكن لم يحدث تغيير فى النسخه وحدث فقط فى الاصل 
sss={1:'a',2:'b',3:'c'};sss_1=sss.copy();sss.pop(1);print("sss : ",sss);print("sss_1:",sss_1)
#نفس الموضوع  ال dictionary . 

#========================
###دالة ()iter ###
###دالة ()next ###
#لاحظ استخدام هاتين الداالتين سويا 
#الغرض انشاء قائمه وطباعه عناصرها بالترتيب بحيث يطبع فى كل مره عنصر واحد وبالترتيب 

d=[1,2,3,4,5]
d_1=iter(d)
print("العنصر الاول",next(d_1))
print("العنصر الثانى",next(d_1))
print("العنصر الثالث",next(d_1))
print("العنصر الرابع",next(d_1))
print("العنصر الخامس",next(d_1))
#لكن لاحظ ان يكون عدد مرات الطباعة يساوى عدد عناصر القائمه او اقل وفى حالة زادت يخرج error
#  print("العنصر السادس",next(d_1)) 

#========================
###دالة ()enumerate ###
#والتى تقوم بترقيم العناصر الموجوده فى قائمة ما 

d=['a','b','c','d'];print(type(d))
for x,y in enumerate(d,1):print(x,"=>",y)    
dd='a','b','c','d';print(type(dd))
for x,y in enumerate(dd,1):print(x,"=>",y)
ddd={'a','b','c','d'};print(type(ddd))
for x,y in enumerate(ddd,1):print(x,"=>",y)
dddd={'a':241,'b':231,'c':251,'d':261};print(type(dddd))# فى القاموس ها يرقم المفاتيح 
for x,y in enumerate(dddd,1):print(x,"=>",y)

#========================
###الدالة ()zip ###
#تقوم بدمج قائمتين او اكثر بحيث تاخذ اول عنصر من كل مجموعه وتضعهم بمجموعه وهكذا مع الثانى والثالث الخ 
f=[1,2,3,4]
f_1=['a','b','c','d']
f_2=['!','@',"#",'$']
f_3=zip(f,f_1,f_2);print(f_3)

#========================
### دالة ()union او رمز الاتحاد "|" ###
#يقوم بعمل اتحاد لعناصر مجموعتين معا او اكثر و تخزينهم فى مجموعه اخرى .
g={1,2,3,4};g_1={'a','b',3,'c','d'};g_2={'!','@',3,"#",'$'}
g_3=g|g_1|g_2;print(g_3)
print("=========================")
g_4=g.union(g_1).union(g_2);print(g_4)
print("===========&=============")
#نلاحظ انها بالرغم من الاتحاد الا انه لا ينم تكرار الرقم 3 لان ذلك من خواص ال set .
#========================
###الدالة ()intersection او رمز التقاطع "&" ###
g_33=g&g_1&g_2;print(g_33)
print("=========================")
g_44=g.intersection(g_1).intersection(g_2);print(g_44)
print("============'-'============")
#========================
###الدالة ()difference او رمز الفرق "-" ###
#نفس شغلها ف الاحصاء ال ف دى ومش ف دى .
g_333=g-g_1-g_2;print(g_333)
print("=========================")
g_444=g.difference(g_1).difference(g_2);print(g_444)
print("============'^'============")
#========================

#في هنا مشكله!!!!!!!!!!!!!!!!!!!!

###الدالة ()symmetric_difference او الرمز "^" ###
#دى بقا بيجيب كل العناصر بعد حذف العناصر المشتركه .
g_3333=g^g_1^g_2;print(g_3333)
print("=========================")
g_4444=g.symmetric_difference(g_1).symmetric_difference(g_2);print(g_4444)

#=========================
###الدالة ()get ###

h={1:'a',2:'b',3:'c'}
print(h.get(1))#هنا بيجيب قيمة 1 
print(h.get(4,"d"))#هنا بقوله هات قيمة 4 ولو مالقيتهاش هات "دى" ف جاب حرف الدى .
print(h.get(3,"h"))#هنا طالما في قيمه لل 3 هايجيبها وها يتجاهل ال انت مديهولو 

for m in range(11):
    n=int(input("ENTER NUMBER '0' IF YOU WANT QUIT OR PREES ENTER : "))
    if n==0:break
